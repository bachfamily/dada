<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="dada.segment" module="dada">

	<digest>
		Score segmentation
	</digest>

	<description>
		Segments a <o>bach.roll</o> or <o>bach.score</o> into chunks
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">dada segmentation</metadata>
		<metadata name="tag">dada corpus-based tools</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Lambda inlet
			</digest>
			<description>
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is some calculation triggered on the elements which had been sent out. <br />
				The lambda inlet also accepts the result in llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Segmented rolls or scores in gathered syntax
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Metadata
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Lambda Outlet
			</digest>
			<description>
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, on the elements output from the lambda outlet may be performed some calculation, taken than into
				account by the algorithm (just use patching and then plug into the lambda inlet the
				result of the calculation). <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="segmentsize" optional="1" type="symbol">
			<digest>
				Segment Size Equation
			</digest>
			<description>
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				Any <m>llll</m> coming in first inlet is considered the gathered syntax of a <o>bach.roll</o> or a <o>bach.score</o>, and
				will trigger the segmentation. Grains are then output from the first outlet along with their metadata (second outlet). <br />
				Any llll in second inlet is considered as the result of a computation for the feature being output from the lambda outlet.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="algorithm" get="1" set="1" type="int" size="1">
			<digest>
				Algorithm
			</digest>
			<description>
				Sets the segmentation algorithm: <br />
				- Equation: a fixed number or an equation is set as <m>segmentsize</m> attribute in order to calculate grain size.
				For a <o>bach.roll</o> this equation should yield a millisecond duration of the grain, and could have the "onset" symbol as variable.
				For a <o>bach.score</o> this equation should yield the symbolic duration of the grain, and can have as variables: "measurenum" (measure number),
				"measuresymdur" (the overall measure symbolic duration), "division" (the measure division) or "beat" (the measure beat). For instance
				<b>beat/2</b> will yield a segmentation each half beat. <br />
				- Markers: each marker is identified as a splitting point. Currently works for <o>bach.roll</o> only. <br />
				- Labels: each label family (collection of elements sharing the same label) is considered as a grain. Currently works for <o>bach.roll</o> only.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Algorithm" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="copytempi" get="1" set="1" type="int" size="1">
			<digest>
				Copy Tempi Marker
			</digest>
			<description>
				s Toggles the ability to copy tempi markers when a <o>bach.roll</o> is segmented (if any). Default is on.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Copy Tempi Marker" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftbpm" get="1" set="1" type="int" size="1">
			<digest>
				Add BPM To Features
			</digest>
			<description>
				Toggles the ability to add the grain tempo (in BPM) to the grain metadata (both for <o>bach.score</o> grains and for <o>bach.roll</o> grains, via tempo markers, if any).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add BPM To Features" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftcustom" get="1" set="1" type="sym_array" size="0">
			<digest>
				Custom Features
			</digest>
			<description>
				Sets the list of custom feature names, which should then be implemented in the lambda loop.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Custom Features" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="ftduration" get="1" set="1" type="int" size="1">
			<digest>
				Add Duration To Features
			</digest>
			<description>
				Toggles the ability to add the duration in milliseconds to the grain metadata (only for <o>bach.roll</o> grains).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Duration To Features" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftidx" get="1" set="1" type="int" size="1">
			<digest>
				Add Index To Features
			</digest>
			<description>
				Toggles the ability to add the grain index (tagged with the <m>idx</m> symbol) to the grain metadata.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Index To Features" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftlabel" get="1" set="1" type="int" size="1">
			<digest>
				Add Label To Features
			</digest>
			<description>
				Toggles the ability to add the label tag to the grain metadata (only when a Marker or Label segmentation <m>algorithm</m> is used).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Label To Features" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftmeasure" get="1" set="1" type="int" size="1">
			<digest>
				Add Measure Number To Features
			</digest>
			<description>
				Toggles the ability to add the measure number to the grain metadata (only for <o>bach.score</o> grains).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Measure Number To Features" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftonset" get="1" set="1" type="int" size="1">
			<digest>
				Add Onset To Features
			</digest>
			<description>
				Toggles the ability to add the onset in milliseconds to the grain metadata (only for <o>bach.roll</o> grains).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Onset To Features" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftphase" get="1" set="1" type="int" size="1">
			<digest>
				Add Beat Phase To Features
			</digest>
			<description>
				Toggles the ability to add the beat phase to the grain metadata (only for <o>bach.score</o> grains).
				Beat phase will be 0. at the beginning of the measure, 1. exactly on the first beat, and so on.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Beat Phase To Features" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftpim" get="1" set="1" type="int" size="1">
			<digest>
				Add Point In Measure To Features
			</digest>
			<description>
				Toggles the ability to add the grain starting point inside its measure (as a rational value) to the grain metadata (only for <o>bach.score</o> grains).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Point In Measure To Features" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftsymduration" get="1" set="1" type="int" size="1">
			<digest>
				Add Symbolic Duration To Features
			</digest>
			<description>
				Toggles the ability to add the grain symbolic duration to the grain metadata (only for <o>bach.score</o> grains).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Symbolic Duration To Features" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftsymonset" get="1" set="1" type="int" size="1">
			<digest>
				Add Symbolic Onset To Features
			</digest>
			<description>
				Toggles the ability to add the grain symbolic onset inside its measure to the grain metadata (only for <o>bach.score</o> grains).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Symbolic Onset To Features" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="fttempo" get="1" set="1" type="int" size="1">
			<digest>
				Add Tempo To Features
			</digest>
			<description>
				Toggles the ability to add the grain tempo to the grain metadata (only for <o>bach.score</o> grains).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Tempo To Features" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="fttype" get="1" set="1" type="int" size="1">
			<digest>
				Add Notation Object Type To Features
			</digest>
			<description>
				Toggles the ability to add the notation object type to the grain metadata (either the "roll" symbol or the "score" symbol).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Notation Object Type To Features" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="ftvoice" get="1" set="1" type="int" size="1">
			<digest>
				Add Voice Number To Features
			</digest>
			<description>
				Toggles the ability to add the voice number of the topmost voice of the grain (tagged with the <m>voice</m> symbol) to the grain metadata.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Features" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Add Voice Number To Features" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="hopsize" get="1" set="1" type="symbol" size="1">
			<digest>
				Hop Equation
			</digest>
			<description>
				s Sets the equation for the hop size (for Equation algorithm and <o>bach.roll</o>only).
				Can include as variables: "onset","measurenum","measuresymdur","division","beat".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Hop Equation" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="lambdamode" get="1" set="1" type="int" size="1">
			<digest>
				Separate Features In Lambda Loop
			</digest>
			<description>
				s Toggles the ability to prepend the feature name in the grain llll output from the lambda outlet, so that each feature can be handled
				by a separate module. An answer (without any router) is expected in the lambda inlet features by routers in the lambda loop.
				This attribute on by default. If it is turned off, then the grain llll is only output through the right outlet preceded by a generic "features"
				symbol, and a single llll of the kind <b>[<m>featurename</m> <m>featurevalue</m>] [<m>featurename</m> <m>featurevalue</m>]...</b> is expected
				in return. This is very convenient for optimization purposes.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Separate Features In Lambda Loop" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="presegment" get="1" set="1" type="int_array" size="0">
			<digest>
				Measure Pre-Segmentation Pattern
			</digest>
			<description>
				Sets an integer pattern for preliminar measure segmentation (for <o>bach.score</o> only). Defaults to 1 measure.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Measure Pre-Segmentation Pattern" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="segmentsize" get="1" set="1" type="symbol" size="1">
			<digest>
				Segmentation Equation
			</digest>
			<description>
				s Sets the equation for the segment size (for Equation algorithm only).
				Can include as variables: "onset","measurenum","measuresymdur","division","beat".
				Use "none" to skip segmentation.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Segmentation Equation" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="tempomarkersseg" get="1" set="1" type="int" size="1">
			<digest>
				Use Tempo Markers For Segmentation
			</digest>
			<description>
				s Toggles the ability to also use tempo markers for marker-based segmentation (see <m>algorithm</m>). Default is off.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Use Tempo Markers For Segmentation" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="voicewise" get="1" set="1" type="int" size="1">
			<digest>
				Voicewise Segmentation
			</digest>
			<description>
				s Toggles the ability to cut each voice in each grain (i.e. to perform the segmentation on each voice independently, and then collect all results).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Voicewise Segmentation" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="wintype" get="1" set="1" type="int" size="1">
			<digest>
				Velocity Window Type
			</digest>
			<description>
				s Sets the type of windowing to be applied on velocities (if any).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Velocity Window Type" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="dada.match" />
		<seealso name="dada.cartesian" />
		<seealso name="dada.base" />
		<seealso name="dada.analysis.centroid" />
		<seealso name="dada.analysis.energy" />
		<seealso name="dada.analysis.count" />
		<seealso name="dada.analysis.spread" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (anything/llll)">
			<description>
				Lambda inlet.
				A lambda inlet is an inlet receiving the answer from a test or modification performed on elements sent out the lambda outlets. <br />
				In this case, the answer is some calculation triggered on the elements which had been sent out. <br />
				The lambda inlet also accepts the result in llll form, so you can sometimes avoid the explicit @out t. <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Segmented rolls or scores in gathered syntax.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Metadata.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Lambda Outlet.
				A lambda outlet is an outlet outputting an element on which some test or modification must be performed.
				The result of the test or modification is then expected in a lambda inlet. <br />
				In this case, on the elements output from the lambda outlet may be performed some calculation, taken than into
				account by the algorithm (just use patching and then plug into the lambda inlet the
				result of the calculation). <br />
				It is important to know that the evaluation chain inside the lambda loop must be direct: you can't use objects such as <o>delay</o>,
				<o>pipe</o>, <o>defer</o>; nor store the value anywhere waiting for some other event to trigger it. Also see #lambda in the bach Help Center.
				<br /> <br />
			</description>
		</entry>
	</misc>

</c74object>