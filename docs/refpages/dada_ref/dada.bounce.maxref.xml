<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="dada.bounce" module="dada">

	<digest>
		Bounce balls in 2D chambers
	</digest>

	<description>
		Implements a geometrical bouncing chamber for balls traveling at constant speed.
		Each edge hit triggers musical data.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">dada</metadata>
		<metadata name="tag">dada interfaces</metadata>
		<metadata name="tag">dada geometry</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Incoming symbol or list
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Dump outlet
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Queries and notifications
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				Information about bounce occurrence
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="3" type="INLET_TYPE">
			<digest>
				Playout
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="4" type="INLET_TYPE">
			<digest>
				bang when object is changed via the interface
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(drag)">
			<arglist />
			<digest>
				Load file or set background image
			</digest>
			<description>
				Dragging an llll or text file on the object will load its content, if a proper readable format is recognized.
				If the file is an image, it will be loaded as object background (whenever meaningful)
			</description>
		</method>
		<method name="(keyboard)">
			<arglist />
			<digest>
				Edit content or play
			</digest>
			<description>
				• <m>Esc</m>: reset center to (0, 0) and zoom to 100%<br />
				• <m>Tab</m>: autozoom<br />
				• <m>Cmd+Z</m> (mac) or <m>Ctrl+Z</m> (win): perform undo step<br />
				• <m>Cmd+Shift+Z</m> (mac) or <m>Ctrl+Y</m> (win): perform redo step<br />
				• <m>Spacebar</m>: toggle play<br />
			</description>
		</method>
		<method name="(mouse)">
			<arglist />
			<digest>
				Edit content
			</digest>
			<description>
				• <m>mousewheel scroll</m>: move the visible region <br />
				• <m>Cmd+mousewheel scroll</m> (mac) or <m>Ctrl+mousewheel scroll</m> (win): change zoom <br />
				• <m>right-click</m> or <m>two-fingers tap</m>: open contextual menu for basic operations<br />
				• <m>click+drag</m> on an element ot move it<br />
				   ↪ Add the <m>Alt</m> key to duplicate it<br />
				• <m>Cmd+click</m> (mac) or <m>Ctrl+click</m> (win) on to delete it<br />
				• <m>right click</m> or <m>two fingers tap</m>: open contextual menu<br />
			</description>
		</method>
		<method name="(tools)">
			<arglist />
			<digest>
				Navigate or edit content
			</digest>
			<description>
				Tools are combination of a specific key pressed and some mouse action. Whenever you press the key, if the tool is available,
				the mouse cursor will switch to the tool specific one. <br />
				Available tools are: <br />
				• Keep the <m>Z</m> key pressed, then click and drag on the canvas to change the zoom <br />
				• Keep the <m>X</m> key pressed, then click and drag on the canvas to move the displayed center <br />
				• Keep the <m>N</m> key pressed, click on the desired element and drag up or down in order to modify its pitch. <br />
				• Keep the <m>V</m> key pressed, click on the desired element and drag up or down in order to modify its velocity. <br />
				• Keep the <m>S</m> key pressed, click on the desired element and drag up or down in order to scale its magnitude or value. <br />
				• Keep the <m>R</m> key pressed, click on the desired element and drag up or down in order to rotate it. <br />
				• Keep the <m>Q</m> key pressed, click on an element, drag up or down to modify the color hue or saturation. <br />
				• Keep the <m>L</m> key pressed, click on an element, keep the mouse down and release the mouse on another element to connect the two elements. <br />
			</description>
		</method>
		<method name="addball">
			<arg name="ball_syntax" optional="0" type="llll" />
			<digest>
				Add a ball
			</digest>
			<description>
				Adds a new ball in the room. The correct syntax is:
				<b>addball <m>BALL_SYNTAX</m></b>, where the ball syntax is the one
				documented in the <m>dump</m> message. The ball syntax should NOT be wrapped in parenthesis.
				For instance, a valid message is: <b>addball [coord -90. 20.] [speed 100. 30.] [color 0.4 0. 0. 1.]</b>
				After the ball has been added, a notification is sent through the second outlet in the form
				<b>addball <m>ball_index</m></b>.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Perform single step
			</digest>
			<description>
				Performs a single step of movement.
			</description>
		</method>
		<method name="clear">
			<arg name="what" optional="1" type="symbol" />
			<digest>
				Clear elements
			</digest>
			<description>
				The word <m>clear</m> force all elements to be deleted.
				A first argument limits the elements to be dumped.
				The <m>clear room</m> message only clears the room state; the <m>clear balls</m> message only clears the balls state. <br />
			</description>
		</method>
		<method name="clock">
			<arglist />
			<digest>
				Select a clock source
			</digest>
			<description>
				The word <m>clock</m>, followed by the name of an existing <m>setclock</m> objects, sets the <o>dada.bounce</o>
				object to be controlled by that <m>setclock</m> object rather than by Max's internal millisecond clock.
				The word <m>clock</m> by itself sets the object back to using Max's regular millisecond clock.
			</description>
		</method>
		<method name="deleteball">
			<arg name="index" optional="0" type="long" />
			<digest>
				Delete a ball
			</digest>
			<description>
				Deletes the <m>N</m>-th ball, where N is the specified index argument.
			</description>
		</method>
		<method name="domain">
			<arg name="arguments" optional="0" type="list" />
			<digest>
				Set the X domain
			</digest>
			<description>
				The <m>domain</m> message, followed by two numbers, sets minimum and maximum coordinates
				to be displayed on the X axis.
				The <m>domain</m> message,  followed by the "start" or "end" symbol and a number, sets the coordinate
				to be displayed respectively at the left boundary or at the right boundary of the object box.
			</description>
		</method>
		<method name="dump">
			<arg name="what" optional="1" type="symbol" />
			<digest>
				Output state
			</digest>
			<description>
				Outputs the current state of the object. The syntax is
				<b>bounce [room <m>GRAPH</m>] [balls <m>BALL1</m> <m>BALL2</m>...]</b>.
				each ball is in the syntax
				<b>(coord <m>x</m> <m>y</m>) (speed <m>x</m> <m>y</m>) (color <m>r</m> <m>g</m> <m>b</m> <m>a</m>)
				(channel <m>MIDIchannel</m>) (flags <m>flags</m>)</b>. <br />
				A first argument limits the elements to be dumped.
				The <m>dump room</m> message only dumps the room state; the <m>dump balls</m> message only dumps the balls state. <br />
				Graph syntax in dada is the following one <b>[<m>VERTEX1</m> <m>VERTEX2</m>...] [<m>EDGE1</m> <m>EDGE2</m>...]</b>.
				Each vertex is an llll shaped as <b>[[coord <m>x</m> <m>y</m>] <m>METADATA1</m> <m>METADATA2</m>...]</b>.
				Each edge is an llll shaped as <b>[<m>edge_start_vertex_index</m> <m>edge_end_vertex_index</m> <m>METADATA1</m> <m>METADATA2</m>...]</b>,
				where the indices of the vertices are 1-based, and correspond to the position on the vertices in the corresponding vertices llll.
				The <m>METADATA</m> llll may depend on the graph metadata type. For instance, if the edges or vertices contain information about pitch
				and velocity, they might be something like <b>[pitch <m>midicents_value</m>]</b> and/or <b>[velocity <m>velocity_value</m>]</b>.
				<br /> <br />
				Item flags syntax in dada is the following one <b>[flags <m>flag1</m> <m>flag2</m>...]</b>, where each flag is one of the following symbols:
				<b>lock</b>, <b>mute</b>, <b>solo</b>, <b>inactive</b>.
				<br /> <br />
			</description>
		</method>
		<method name="exportimage">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Save as PNG image
			</digest>
			<description>
				Message attributes:<br />
				<m>@filename</m> (symbol, default: none): filename<br />
				<m>@dpi</m> (int, default: 72): Dots Per Inch<br />
				<m>@width</m> (double, default: none): Width In Coordinates<br />
				<m>@height</m> (double, default: none): Height In Coordinates<br />
				<m>@pixelwidth</m> (double, default: none): Width In Pixels<br />
				<m>@pixelheight</m> (double, default: none): Height In Pixels<br />
				<m>@center</m> (llll, default: none): Center Coordinates<br />
				<m>@zoom</m> (llll, default: none): Zoom Percentage<br />
				<br />
				Saves the object as a PNG image. Optional argument provides the filename (otherwise a dialog box will pop up).
			</description>
		</method>
		<method name="flush">
			<arglist />
			<digest>
				Send all note-offs
			</digest>
			<description>
				The word <m>flush</m> force all the note-offs for notes being played to be sent.
				This is effective only when the <m>play</m> attribute is set to 1.
			</description>
		</method>
		<method name="getdomain">
			<arglist />
			<digest>
				Retrieve current X domain
			</digest>
			<description>
				The <m>getdomain</m> message outputs from the third outlet the minimum and maximum
				coordinates displayed on the X axis, preceded by a <m>domain</m> symbol.
			</description>
		</method>
		<method name="getrange">
			<arglist />
			<digest>
				Retrieve current Y range
			</digest>
			<description>
				The <m>getrange</m> message outputs from the third outlet the minimum and maximum
				coordinates displayed on the Y axis, preceded by a <m>range</m> symbol.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Play/Stop
			</digest>
			<description>
				A non-zero integer triggers a <m>play</m> message, a zero integer triggers a <m>stop</m> message
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set state
			</digest>
			<description>
				Sets the current state of the object. The syntax must follow the one described in the
				<m>dump</m> message documentation (although room only or balls only can be assigned).
			</description>
		</method>
		<method name="meta">
			<arg name="element_type" optional="0" type="symbol" />
			<arg name="element_index" optional="0" type="long" />
			<arg name="metadata" optional="0" type="llll" />
			<digest>
				Assign metadata
			</digest>
			<description>
				Examples:<br />
				• <b>meta edge 5 [pitch 6300] [vel 80]</b>   <i>→ Assign a pitch of 6300 cents and a velocity of 80 as metadata for 5th edge</i><br />
				• <b>meta vertex 4 [pitch 6300] [vel 80]</b>   <i>→ The same, for 4th vertex</i><br />
				• <b>meta edge 1 [score roll [[200 [7200. 405. 100]] [700 [6300. 405. 100]]]]</b>   <i>→ Assign a bach.roll syntax as score metadata for edge 1</i><br />
				• <b>meta edge 1 [score score [[[[ 4 4 ] [[ 1/4 120 ]]] [ 1 [ 4700. 100 0 ]]]]]</b>   <i>→ Assign a bach.score syntax as score metadata for edge 1</i><br />
				<br />
				The word <m>meta</m>, followed by the <m>edge</m> symbol or the <m>vertex</m> symbol,
				and the edge or vertex index, assigns metadata to a vertex or an edge.
				The metadata should be contained in the llll specified as
				further argument.
				If the metadata <m>type</m> is set to "Pitch and velocity", such llll should contain a specification such as <b>[pitch <m>mc</m>]</b> and/or
				<b>[velocity <m>vel</m>]</b>.
				If the metadata <m>type</m> is set to "Scores", such llll should be the score itself.
			</description>
		</method>
		<method name="move">
			<arg name="element_type" optional="0" type="symbol" />
			<arg name="element_index" optional="0" type="long" />
			<arg name="delta_coord" optional="0" type="llll" />
			<digest>
				Translate elements
			</digest>
			<description>
				Examples:<br />
				• <b>move component 1 [10 10]</b>   <i>→ Move the 1st connected component by (10, 10)</i><br />
				• <b>move vertex 5 [-4 0]</b>   <i>→ Move the 5th vertex by (-4, 0)</i><br />
				• <b>move edge 3 [0 10]</b>   <i>→ Shift 2nd edge up by 10</i><br />
				• <b>move ball 1 [0 10]</b>   <i>→ Shift 1st ball up by 10</i><br />
				<br />
				The word <m>move</m> followed by an element type (either <m>vertex</m> or
				<m>edge</m> or <m>component</m> or <m>ball</m>), followed by the index of a shape or ball and a
				vector in wrapped <b>[<m>x</m> <m>y</m>]</b> syntax,
				translates the element by the given vector.
			</description>
		</method>
		<method name="notes">
			<arg name="pitch_and_vels" optional="0" type="llll" />
			<digest>
				Assign pitches and velocities
			</digest>
			<description>
				When <m>type</m> is set to "Pitch and Velocity", the <m>notes</m> message assigns
				a pitch and velocity to each of the edges. An llll of type <b>[<m>pitch</m> <m>vel</m>] [<m>pitch</m> <m>vel</m>]...</b>
				is expected as argument.
			</description>
		</method>
		<method name="play">
			<arglist />
			<digest>
				Start sequencing
			</digest>
			<description>
				Starts the sequencing engine.
			</description>
		</method>
		<method name="range">
			<arg name="arguments" optional="0" type="list" />
			<digest>
				Set the Y range
			</digest>
			<description>
				The <m>range</m> message, followed by two numbers, sets minimum and maximum coordinates
				to be displayed on the Y axis
				The <m>range</m> message,  followed by the "start" or "end" symbol and a number, sets the coordinate
				to be displayed respectively at the bottom boundary or at top right boundary of the object box.
			</description>
		</method>
		<method name="read">
			<arg name="file_name" optional="1" type="symbol" />
			<digest>
				Load from disk
			</digest>
			<description>
				The specified file is read from disk and the llll it contains loaded as current state.
				Syntax is expected to be in the format explained in the <m>dump</m> message documentation.
			</description>
		</method>
		<method name="rotate">
			<arg name="element_type" optional="0" type="symbol" />
			<arg name="element_index" optional="0" type="long" />
			<arg name="angle" optional="0" type="number/llll" />
			<digest>
				Rotate elements
			</digest>
			<description>
				Examples:<br />
				• <b>rotate component 1 2</b>   <i>→ Rotate the 1st connected component by 2 radians</i><br />
				• <b>rotate ball 1 [30 deg]</b>   <i>→ Rotate the 1st ball by 30 degrees</i><br />
				<br />
				The word <m>rotate</m> followed by an element type (either <m>component</m> or <m>ball</m>),
				followed by the index of a shape and an angle in radians
				rotates the element by the given angle. If the angle is terminates with the degrees ° symbol after the number (without any spaces)
				or if it is given as an llll of the form <b>[<m>angle</m> deg]</b>,
				then the angle is assumed to be in degrees.
			</description>
		</method>
		<method name="scale">
			<arg name="element_type" optional="0" type="symbol" />
			<arg name="element_index" optional="0" type="long" />
			<arg name="factor" optional="0" type="number" />
			<digest>
				Scale elements
			</digest>
			<description>
				Examples:<br />
				• <b>scale ball 3 4</b>   <i>→ Scale 3rd ball velocity by 4</i><br />
				• <b>scale component 1 0.5</b>   <i>→ Shrink 1st connected component by 2</i><br />
				<br />
				The word <m>scale</m> followed by an element type (either <m>component</m> or <m>ball</m>),
				followed by the index of a shape and a floating point number,
				scales the element by the given number.
			</description>
		</method>
		<method name="scores">
			<arg name="scores" optional="0" type="llll" />
			<digest>
				Assign scores
			</digest>
			<description>
				When <m>type</m> is set to "Scores", the <m>scores</m> message assigns
				a score to each of the edges. An llll of type <b>[<m>SCORE1</m>] [<m>SCORE2</m>]...</b>
				is expected as argument, where each <m>SCORE</m> is usually a <o>bach.roll</o> or <o>bach.score</o> gathered syntax,
				but can also be any other llll.
			</description>
		</method>
		<method name="split">
			<arg name="edge" optional="0" type="symbol" />
			<arg name="edge_index" optional="0" type="long" />
			<arg name="split_point" optional="0" type="llll" />
			<digest>
				Split edges
			</digest>
			<description>
				Example: <b>split edge 3 [-40 0]</b>   <i>→ Split 3rd edge by adding a point at (-40, 0)</i><br />
				<br />
				The word <m>split</m> followed by the <m>edge</m> symbol,
				by the index of the edge to be split, and by the wrapped llll with the
				splitting <b>[<m>x</m> <m>y</m>]</b> coordinates, splits the given edge
				at the specified point, and outputs a notification through the second outlet
				containing the <m>edge split</m> symbols, plus the sequence of newly created edges.
			</description>
		</method>
		<method name="stop">
			<arglist />
			<digest>
				Stop sequencing
			</digest>
			<description>
				Stops the sequencing engine.
			</description>
		</method>
		<method name="subdivide">
			<arg name="edge" optional="0" type="symbol" />
			<arg name="edge_index" optional="0" type="long" />
			<arg name="num_subdivisions" optional="0" type="long" />
			<digest>
				Subdivide edges
			</digest>
			<description>
				Example: <b>subdivide edge 5 4</b>   <i>→ Subdivide 5th edge into 4 parts</i><br />
				<br />
				The word <m>subdivide</m> followed by the <m>edge</m> symbol,
				by the index of the edge to be subdivide, and by an integer number, subdivides the given edge
				into the specified number of new segments, and outputs a notification through the second outlet
				containing the <m>edge subdivide</m> symbols, plus the sequence of newly created edges.
			</description>
		</method>
		<method name="write">
			<arg name="file" optional="1" type="symbol" />
			<digest>
				Save in native format
			</digest>
			<description>
				A <m>write</m> message will save the current state (as llll) in a file, in native format.
				If an argument is given, this is the filename (if the file is in the search path
				or in the same folder) or the full file path. If no argument is given, a dialog window pops up.
				Syntax is expected to be in the format explained in the <m>dump</m> message documentation.
			</description>
		</method>
		<method name="writetxt">
			<arg name="file" optional="1" type="symbol" />
			<digest>
				Save in text format
			</digest>
			<description>
				A <m>write</m> message will save the current state (as llll) in a file,
				in a human-readable text format.
				If an argument is given, this is the filename (if the file is in the search path
				or in the same folder) or the full file path. If no argument is given, a dialog window pops up.
				Syntax is expected to be in the format explained in the <m>dump</m> message documentation.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="ballsize" get="1" set="1" type="float" size="1">
			<digest>
				Ball Size
			</digest>
			<description>
				s Sets the size of each ball.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="3." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Ball Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="blinktime" get="1" set="1" type="float" size="1">
			<digest>
				Blinking Time
			</digest>
			<description>
				Sets the blinking time of the played edges in milliseconds
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="200" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Blinking Time" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="bouncedata" get="1" set="1" type="int" size="1">
			<digest>
				Output Bounce Data
			</digest>
			<description>
				Toggles the ability to output bounce information from third outlet.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Bounce Data" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="continuousbang" get="1" set="1" type="" size="1">
			<digest>
				Continuously Output bang if Changed 
			</digest>
			<description>
				Toggles the ability to send the changed bang continuously during mousedrag actions.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Continuously Output bang if Changed " />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="edgewidth" get="1" set="1" type="float" size="1">
			<digest>
				Room Edge Line Width
			</digest>
			<description>
				s Sets the edge width.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="1.5" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Room Edge Line Width" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="indexaschannel" get="1" set="1" type="int" size="1">
			<digest>
				Use Ball Index As Channel
			</digest>
			<description>
				If active, the output MIDI channel is NOT the ball midichannel, rather the ball index.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Use Ball Index As Channel" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="jitmatrix" get="1" set="1" type="" size="1">
			<digest>
				
			</digest>
			<description>
				Sets the name of a jitter matrix to which the output should be mirrored.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="messagebang" get="1" set="1" type="" size="1">
			<digest>
				Send bang Upon Messages
			</digest>
			<description>
				Toggles the ability to send the changed bang also when changes happen via messages.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send bang Upon Messages" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Metadata Mode
			</digest>
			<description>
				Sets the graph metadata mode: either edges have pitch and velocity information (0), or
				vertices do (1). In this case, when a ball hits an edge, the resulting pitch/velocity will be the
				appropriate interpolation of the vertices' pitches.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Metadata Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="noteoff" get="1" set="1" type="int" size="1">
			<digest>
				Send Noteoff Information
			</digest>
			<description>
				Toggles the ability to send the noteoff information for a previous edge, once a ball hits a new one.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send Noteoff Information" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="notify" get="1" set="1" type="" size="1">
			<digest>
				Send Notifications
			</digest>
			<description>
				Toggles the ability to send notifications for interface activities (such as clicks, mousehovers, etc.).
				Notifications are sent through the dedicated outlet. If the "Verbose" mode is set, whenever meaningful, the state
				of the notified element will be also output.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send Notifications" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="notifypaint" get="1" set="1" type="" size="1">
			<digest>
				Notify Display Refresh
			</digest>
			<description>
				Toggles the ability to notify every new redraw of the box via a "painted" symbol.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Notify Display Refresh" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="roomcolor" get="1" set="1" type="rgba" size="1">
			<digest>
				Room Color
			</digest>
			<description>
				Sets the color of the graph constituting the room.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Color" />
				<attribute name="default" get="1" set="1" type="rgba" size="1" value="0.3 0.3 0.3 1." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Room Color" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="rgba" />
			</attributelist>
		</attribute>
		<attribute name="showballs" get="1" set="1" type="int" size="1">
			<digest>
				Show Balls
			</digest>
			<description>
				s Toggles the ability to display the balls.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="3" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Balls" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showroom" get="1" set="1" type="int" size="1">
			<digest>
				Show Room
			</digest>
			<description>
				s Toggles the ability to show the room graph.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Room" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="showspeed" get="1" set="1" type="int" size="1">
			<digest>
				Show Ball Speed
			</digest>
			<description>
				s Toggles the ability to display the ball speed.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Show Ball Speed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="speeddisplayfactor" get="1" set="1" type="float" size="1">
			<digest>
				Speed Display Factor
			</digest>
			<description>
				s Sets the display factor for the ball speed.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="0.2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Speed Display Factor" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="speedvel" get="1" set="1" type="int" size="1">
			<digest>
				Velocities Depend On Normal Speed
			</digest>
			<description>
				Toggles the ability to rescale velocities depending on the normal component of the
				speed of the ball bouncing on an edge.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Velocities Depend On Normal Speed" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="tonedivision" get="1" set="1" type="int" size="1">
			<digest>
				Microtonal Division
			</digest>
			<description>
				In the bach environment, the tone division defines the microtonal accuracy of the symbolic representation,
				by representing the number of steps in which each tone is divided.
				For the standard semitonal representation (where just sharps and flats suffice), one can stick with
				<m>tonedivision</m> being 2, meaning: the tone is divided into two semitones.
				By increasing this value, the microtonal grid gets more dense: for instance, 4 is the quartertonal grid
				(where each tone is divided in 4 quartertones); 8 is the eight-tonal grid, and so on.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="2" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Microtonal Division" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="type" get="1" set="1" type="int" size="1">
			<digest>
				Metadata Type
			</digest>
			<description>
				Sets the graph metadata type: either a combination of pitch and velocity (simple case)
				or a complex score.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Metadata Type" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="undobang" get="1" set="1" type="" size="1">
			<digest>
				Send bang Upon Undo
			</digest>
			<description>
				Toggles the ability to send the changed bang also when changes happen via messages.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="default" get="1" set="1" type="" size="1" value="1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Send bang Upon Undo" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="vertexsize" get="1" set="1" type="float" size="1">
			<digest>
				Room Vertex Size
			</digest>
			<description>
				s Sets the size of each vertex.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="float" size="1" value="4." />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Room Vertex Size" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="vzoom" get="1" set="1" type="" size="1">
			<digest>
				Vertical Zoom %
			</digest>
			<description>
				Sets the object vertical zoom percentage
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="" size="1" value="100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Vertical Zoom %" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="zoom" get="1" set="1" type="" size="1">
			<digest>
				Zoom %
			</digest>
			<description>
				Sets the object zoom percentage (or horizontal zoom, if the object is separately zoommable on horizontal and on vertical axis).
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Appearance" />
				<attribute name="default" get="1" set="1" type="" size="1" value="100" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Zoom %" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="dada.kaleido" />
		<seealso name="dada.bodies" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (anything/llll)">
			<description>
				Incoming symbol or list.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Dump outlet.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				Queries and notifications.
			</description>
		</entry>
		<entry name ="Outlet 3 (llll)">
			<description>
				Information about bounce occurrence.
			</description>
		</entry>
		<entry name ="Outlet 4 (llll)">
			<description>
				Playout.
			</description>
		</entry>
		<entry name ="Outlet 5 (bang)">
			<description>
				bang when object is changed via the interface.
			</description>
		</entry>
	</misc>

</c74object>