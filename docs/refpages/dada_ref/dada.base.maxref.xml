<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="dada.base" module="dada">

	<digest>
		SQLite database
	</digest>

	<description>
		Implements a database supporting lllls (and hence scores), as well as standard Max data types.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">dada</metadata>
		<metadata name="tag">dada storage</metadata>
		<metadata name="tag">dada corpus-based tools</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Incoming queries or messages
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Query results or dump
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				Bang when an external file has been properly loaded
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="name" optional="1" type="symbol">
			<digest>
				Name
			</digest>
			<description>
				The first arguments sets the database name.
				If the name is not set, an unique name will be assigned to the database.
			</description>
		</objarg>
		<objarg name="filename" optional="1" type="symbol">
			<digest>
				Filename
			</digest>
			<description>
				The second argument, if set, sets the database filename.
				If such argument is set, the database is automatically read from the file and saved in the file whenever the patch is saved.
				If the name provided terminates with the ".db3" extension, the database is stored as a standard native SQLite3 database,
				which guarantees the best performance at reloading. Otherwise, the database is saved as in bach textual form.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(doubleclick)">
			<arglist />
			<digest>
				Edit database as text
			</digest>
			<description>
				Doubleclicking on the object forces a text editor to open up, where the whole database can be edited directly in text form.
			</description>
		</method>
		<method name="(drag)">
			<arglist />
			<digest>
				Drag-and-drop database loading
			</digest>
			<description>
				The specified file is read from disk and the database it contains (as llll) is opened.
			</description>
		</method>
		<method name="adddistanceentry">
			<arg name="distance_table_name" optional="0" type="symbol" />
			<arg name="reference_table_name" optional="0" type="symbol" />
			<arg name="reference_column_name" optional="0" type="symbol" />
			<arg name="column_value1" optional="0" type="atom" />
			<arg name="column_value2" optional="0" type="atom" />
			<arg name="distance" optional="0" type="number" />
			<digest>
				Add an entry to a distance table
			</digest>
			<description>
				Example: <b>addentry disttowns towns name NewYork Buffalo 601</b>   <i>→ add in "disttowns" the information about the distance between NewYork and Buffalo (idenfitied by their name inside the table "towns".</i><br />
				<br />
				An <m>adddistanceentry</m> adds an entry in a distance table. Syntax is
				<m>adddistanceentry</m> <m><b>distance_table_name</b></m> <m><b>reference_table_name</b></m>
				<m><b>reference_column_name</b></m> <m><b>column_value1</b></m> <m><b>column_value2</b></m>
				<m><b>distance</b></m>.
			</description>
		</method>
		<method name="adddistanceentry">
			<arg name="distance_table_name" optional="0" type="symbol" />
			<arg name="reference_table_name" optional="0" type="symbol" />
			<arg name="reference_column_name" optional="0" type="symbol" />
			<arg name="column_value1" optional="0" type="atom" />
			<arg name="column_value2" optional="0" type="atom" />
			<arg name="distance" optional="0" type="number" />
			<digest>
				Add an entry to a distance table
			</digest>
			<description>
				Example: <b>addentry disttowns towns name NewYork Buffalo 601</b>   <i>→ add in "disttowns" the information about the distance between NewYork and Buffalo (idenfitied by their name inside the table "towns".</i><br />
				<br />
				An <m>adddistanceentry</m> adds an entry in a distance table. Syntax is
				<m>adddistanceentry</m> <m><b>distance_table_name</b></m> <m><b>reference_table_name</b></m>
				<m><b>reference_column_name</b></m> <m><b>column_value1</b></m> <m><b>column_value2</b></m>
				<m><b>distance</b></m>.
			</description>
		</method>
		<method name="adddistancetable">
			<arg name="table_name" optional="0" type="symbol" />
			<arg name="reference_table_name" optional="0" type="symbol" />
			<digest>
				Add a distance table to the database
			</digest>
			<description>
				Example: <b>adddistancetable disttowns towns</b>   <i>→ add a distance table named "disttowns" designed to contain distances of elements from the table "towns".</i><br />
				<br />
				An <m>adddistancetable</m> message followed by a table name and the name of a reference table
				will add a table designed to contain distances between the entries of the reference table.
				Distances should be then added via <m>adddistanceentry</m>.
			</description>
		</method>
		<method name="addentry">
			<arg name="table_name" optional="0" type="symbol" />
			<arg name="specs" optional="0" type="llll" />
			<digest>
				Add an entry to a table
			</digest>
			<description>
				Example: <b>addentry towns [name NewYork] [population 8406000]</b>   <i>→ add an entry in the table "towns".</i><br />
				<br />
				An <m>addentry</m> message followed by a table name and some entry specification
				will add an entry to the table (if existing). Entry specification be in the form <b>[<m>columnname1</m> <m>content1</m>] [<m>columnname2</m> <m>content2</m>]... </b>.
			</description>
		</method>
		<method name="addtable">
			<arg name="table_name" optional="0" type="symbol" />
			<arg name="columns" optional="0" type="llll" />
			<digest>
				Add a table to the database
			</digest>
			<description>
				Example: <b>addtable towns [name s] [population i]</b>   <i>→ add a table named "towns" with two columns: name (symbol) and popuplation (integer)</i><br />
				<br />
				An <m>addtable</m> message followed by a table name and some columns specifications
				will add a table to the database having the given number and types of columns.
				Column specification must be in the form <b>[<m>name1</m> <m>type1</m>] [<m>name2</m> <m>type2</m>]... </b>
				where each <m>name</m> is a symbol and each type is one of the symbols: "f" (float), "i" (integer), "s" (symbol), "r" (rational), "l" (llll).
			</description>
		</method>
		<method name="appendfromfile">
			<arg name="table_name" optional="0" type="symbol" />
			<arg name="filename" optional="1" type="symbol" />
			<arg name="columns" optional="1" type="llll" />
			<digest>
				Appends entries to table from file
			</digest>
			<description>
				Appends the content of a given text file (second argument) to a table (first argument).
				The file should contain a properly formatted <m>llll</m> in the form
				<b><m>ENTRY1</m> <m>ENTRY2</m>...</b>, where each <b><m>ENTRY</m></b> is in the form
				<b>[[<m>column_name</m> <m>value[s]</m>] [<m>column_name</m> <m>value[s]</m>]...]</b>. <br />
				If a third specification of the kind <b>[cols <m>colname1</m> <m>colname2</m>...]</b> is set,
				only the specified columns will be imported into the database. <br />
				If you have a massive amount of symbol entries in your table, this should be the preferred method of loading
				them into a <o>dada.base</o> object, since it bypasses the Max symbol table, inserting strings directly into the SQLite database.
			</description>
		</method>
		<method name="clear">
			<arg name="table_name" optional="1" type="symbol" />
			<digest>
				Delete entries
			</digest>
			<description>
				A <m>clear</m> message will delete all entries from all tables. If a table name
				is specified as a second argument, only the entries of such table are deleted.
			</description>
		</method>
		<method name="deletetable">
			<arg name="table_name" optional="0" type="symbol" />
			<digest>
				Delete a specific table
			</digest>
			<description>
				A <m>deletetable</m> message followed by a table name will delete such table (if it exists) from the database.
			</description>
		</method>
		<method name="dump">
			<arglist />
			<digest>
				Output entire database as llll
			</digest>
			<description>
				Outputs the entire database in llll form (also outputs the column names depending on the
				<m>outputcolnames</m> attribute).
				Syntax is: <b><m>TABLE1</m> <m>TABLE2</m>...</b>, where each table is <b>[<m>TABLE_HEADER</m> <m>TABLE_CONTENT</m>]</b>,
				where <m>TABLE_HEADER</m> is
				<b>[<m>table_name</m> [<m>column_name1</m> <m>column_type1</m>] [<m>column_name2</m> <m>column_type2</m>]...]</b>
				and <m>TABLE_CONTENT</m> is
				<b>[[<m>table_id_name</m> <m>id</m>] [<m>field1_name</m> <m>content1</m>] [<m>field2_name</m> <m>content2</m>]...]</b>
				and the <m>table_id_name</m> name is the singularized version of the table name, with the "_id" suffix (e.g.
				for a table named "waves" this will be "wave_id").
			</description>
		</method>
		<method name="erase">
			<arglist />
			<digest>
				Erase database
			</digest>
			<description>
				An <m>erase</m> message will delete all tables and all entries in the database.
			</description>
		</method>
		<method name="getcols">
			<arglist />
			<digest>
				Output column names and types as llll
			</digest>
			<description>
				Outputs the table header for each table in the database, i.e. the column names and types.
				Syntax is: <b><m>TABLE1</m> <m>TABLE2</m>...</b>, where each table is
				<b>[<m>table_name</m> [<m>column_name1</m> <m>column_type1</m>] [<m>column_name2</m> <m>column_type2</m>]...]</b>
			</description>
		</method>
		<method name="query">
			<arg name="query" optional="0" type="anything" />
			<digest>
				Send a query
			</digest>
			<description>
				Sends a query to the database. The query result will be output from the first outlet.
			</description>
		</method>
		<method name="read">
			<arg name="file_name" optional="1" type="symbol" />
			<digest>
				Load database from disk
			</digest>
			<description>
				The specified file is read from disk and the llll it contains is set as current database.
				In order to have the correct syntax, the llll must be as the one written by <m>write</m> or <m>writetxt</m> messages.
			</description>
		</method>
		<method name="write">
			<arg name="file" optional="1" type="symbol" />
			<digest>
				Save database in native format
			</digest>
			<description>
				A <m>write</m> message will save the database (as llll) in a file, in native format.
				If an argument is given, this is the filename (if the file is in the search path
				or in the same folder) or the full file path. If no argument is given, a dialog window pops up.
				Syntax is expected to be in the format explained in the <m>dump</m> message documentation.
			</description>
		</method>
		<method name="writetxt">
			<arg name="file" optional="1" type="symbol" />
			<digest>
				Save database in text format
			</digest>
			<description>
				A <m>writetxt</m> message will save the database (as llll) in a file, in text format.
				If an argument is given, this is the filename (if the file is in the search path
				or in the same folder) or the full file path. If no argument is given, a dialog window pops up.
				Syntax is expected to be in the format explained in the <m>dump</m> message documentation.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="escapesinglequotes" get="1" set="1" type="int" size="1">
			<digest>
				Escape Single Quotes
			</digest>
			<description>
				Toggles the ability to escape single quotes in symbols when adding entries. Defaults to 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Escape Single Quotes" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="name" get="1" set="1" type="symbol" size="1">
			<digest>
				Database Name
			</digest>
			<description>
				Sets the name of the database
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Database Name" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="nulltodefault" get="1" set="1" type="int" size="1">
			<digest>
				Convert null lllls to Default Values
			</digest>
			<description>
				Toggles the ability to convert null lllls to default values, for columns of type int, float and symbol.
				Default is on. If you turn this off, the null lllls will result in NULL SQLite fields.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Convert null lllls to Default Values" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="outputcolnames" get="1" set="1" type="int" size="1">
			<digest>
				Output Column Names
			</digest>
			<description>
				Toggles the ability to output the column names in query answers. Defaults to 1.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Settings" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Column Names" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.shelf" />
		<seealso name="dada.segment" />
		<seealso name="dada.cartesian" />
		<seealso name="dada.distances" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (anything/llll)">
			<description>
				Incoming queries or messages.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				Query results or dump.
			</description>
		</entry>
		<entry name ="Outlet 2 (bang)">
			<description>
				Bang when an external file has been properly loaded.
			</description>
		</entry>
	</misc>

</c74object>